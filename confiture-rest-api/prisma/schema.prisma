// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "camel"
}

model Recipent {
  id    Int    @id @default(autoincrement())
  name  String
  email String

  Audit         Audit?  @relation(fields: [auditUniqueId], references: [editUniqueId], onDelete: Cascade)
  auditUniqueId String?

  @@unique([email, auditUniqueId])
}

enum AuditType {
  FAST // 25 criteria
  COMPLEMENTARY // 50 criteria
  FULL // 106 criteria
}

model Audit {
  id Int @id @default(autoincrement())

  // Audit creation step
  auditType                AuditType
  procedureName            String
  /// @DtoEntityHidden
  pages                    AuditedPage[]
  auditorName              String?
  auditorEmail             String?
  showAuditorEmailInReport Boolean       @default(false)

  // A11y declaration edition step
  initiator           String?
  auditorOrganisation String?
  procedureUrl        String?
  contactName         String?
  contactEmail        String?
  contactFormUrl      String?
  technologies        String[]
  tools               String[]
  environments        TestEnvironment[]
  notCompliantContent String?
  derogatedContent    String?
  notInScopeContent   String?
  notes               String?
  notesFiles          AuditFile[]

  // Misc
  recipients      Recipent[] // unused for now
  creationDate    DateTime?
  publicationDate DateTime?
  editionDate     DateTime?
  editUniqueId    String     @unique
  consultUniqueId String     @unique
  auditTraceId    Int        @unique
  auditTrace      AuditTrace @relation(fields: [auditTraceId], references: [id])

  // Audit duplication history
  sourceAudit   Audit?  @relation("AuditDuplicationHistory", fields: [sourceAuditId], references: [id])
  sourceAuditId Int?
  auditCopies   Audit[] @relation("AuditDuplicationHistory")

  // As of https://github.com/DISIC/Ara/pull/662, when an audit is deleted, its
  // data is longer editable, but the report remainn available
  isHidden Boolean @default(false)

  @@unique([editUniqueId, consultUniqueId])
}

model TestEnvironment {
  id                         Int     @id @default(autoincrement())
  platform                   String
  operatingSystem            String
  operatingSystemVersion     String?
  assistiveTechnology        String
  assistiveTechnologyVersion String?
  browser                    String
  browserVersion             String?

  audit         Audit?  @relation(fields: [auditUniqueId], references: [editUniqueId], onDelete: Cascade)
  auditUniqueId String?

  @@unique([platform, operatingSystem, operatingSystemVersion, assistiveTechnology, assistiveTechnologyVersion, browser, browserVersion, auditUniqueId])
}

model AuditedPage {
  id    Int    @id @default(autoincrement())
  order Int    @default(0)
  name  String
  url   String

  audit         Audit?  @relation(fields: [auditUniqueId], references: [editUniqueId], onDelete: Cascade)
  auditUniqueId String?

  results CriterionResult[]
}

model CriterionResult {
  id Int @id @default(autoincrement())

  status     CriterionResultStatus @default(NOT_TESTED)
  transverse Boolean               @default(false)

  compliantComment String?

  errorDescription String?
  userImpact       CriterionResultUserImpact?
  recommandation   String?
  exampleImages    StoredFile[]
  quickWin         Boolean                    @default(false)

  notApplicableComment String?

  topic     Int
  criterium Int

  // Results are linked through the page url and audit unique id.
  pageId Int
  /// @DtoEntityHidden
  page   AuditedPage @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([pageId, topic, criterium])
}

enum CriterionResultStatus {
  COMPLIANT
  NOT_COMPLIANT
  NOT_APPLICABLE
  NOT_TESTED
}

enum CriterionResultUserImpact {
  MINOR
  MAJOR
  BLOCKING
}

model AuditTrace {
  id                   Int    @id @default(autoincrement())
  auditEditUniqueId    String @unique
  auditConsultUniqueId String @unique
  Audit                Audit?
}

model StoredFile {
  id               Int    @id @default(autoincrement())
  originalFilename String
  mimetype         String @default("image/unknown")
  size             Int

  // S3 storage keys
  key String
  thumbnailKey String

  criterionResult   CriterionResult? @relation(fields: [criterionResultId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  criterionResultId Int?
}

model AuditFile {
  id               Int    @id @default(autoincrement())
  originalFilename String
  url              String
  mimetype         String @default("image/unknown")
  size             Int

  // S3 storage key
  key String

  thumbnailUrl String?
  thumbnailKey String?

  audit				 Audit? @relation(fields: [auditUniqueId], references: [editUniqueId], onDelete: Cascade)
  auditUniqueId String?
}

enum EmailStatus {
  SUCCESS
  FAILURE
}

enum EmailType {
  AUDIT_CREATION
  ACCOUNT_VERIFICATION
  ACCOUNT_CONFIRMATION
  PASSWORD_UPDATE_CONFIRMATION
  EMAIL_UPDATE_VERIFICATION
  EMAIL_UPDATE_CONFIRMATION
  PASSWORD_RESET_REQUEST
}

model EmailLog {
  id Int @id @default(autoincrement())

  to     String
  type   EmailType
  status EmailStatus

  createdAt   DateTime @default(now())
  lastAttempt DateTime @default(now())
}

model User {
  id  Int    @id @default(autoincrement())
  /// @DtoEntityHidden
  uid String @unique @default(uuid())

  username String @unique
  /// @DtoEntityHidden
  password String

  /// @DtoEntityHidden
  isVerified      Boolean @default(false)
  /// @DtoEntityHidden
  verificationJti String?

  name    String?
  orgName String?

  /// @DtoEntityHidden
  newEmail                String?
  /// @DtoEntityHidden
  newEmailVerificationJti String?
}

model ActiveFeedbackToken {
  uid String @id
}
