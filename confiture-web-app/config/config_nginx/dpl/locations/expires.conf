# Expire rules for static content

# No default expire rule. This config mirrors that of apache as outlined in the
# html5-boilerplate .htaccess file. However, nginx applies rules by location,
# the apache rules are defined by type. A consequence of this difference is that
# if you use no file extension in the url and serve html, with apache you get an
# expire time of 0s, with nginx you'd get an expire header of one month in the
# future (if the default expire rule is 1 month). Therefore, do not use a
# default expire rule with nginx unless your site is completely static

# cache.appcache, your document html and data

# do not use location but if ($uri... because else problems with reverse proxy

#location ~* \.(?:manifest|appcache|html?|xml|json)$ {
## OJX: on veut le html
## if ($uri ~* \.(?:manifest|appcache|html?|xml|json)$) {
if ($uri ~* \.(?:manifest|appcache|xml|json)$) {
  expires -1;
  access_log /var/log/nginx/static.log;
  access_log /dev/stdout;
}

# Feed
#location ~* \.(?:rss|atom)$ {
if ($uri ~* \.(?:rss|atom)$) {
  expires 1h;
  add_header Cache-Control "public";
}

# Media: images, icons, video, audio, HTC
#location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
if ($uri ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$) {
  expires 1M;
  access_log off;
  add_header Cache-Control "public";
}

# CSS and Javascript
#location ~* \.(?:css|js)$ {
if ($uri ~* \.(?:css|js)$) {
  expires 1y;
  access_log off;
  add_header Cache-Control "public";
}

# WebFonts
# If you are NOT using cross-domain-fonts.conf, uncomment the following directive
# location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
#  expires 1M;
#  access_log off;
#  add_header Cache-Control "public";
# }
## location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
if ($uri ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$) {
  # Cross domain AJAX requests
  # http://www.w3.org/TR/cors/#access-control-allow-origin-response-header
  # **Security Warning**
  # Do not use this without understanding the consequences.
  # This will permit access from any other website.
  #
  # add_header "Access-Control-Allow-Origin" "*";
  #
  # Instead of using this file, consider using a specific rule such as:
  #
  # Allow access based on [sub]domain:
  #    add_header "Access-Control-Allow-Origin" "subdomain.example.com";

  # Also, set cache rules for webfonts.
  #
  # See http://wiki.nginx.org/HttpCoreModule#location
  # And https://github.com/h5bp/server-configs/issues/85
  # And https://github.com/h5bp/server-configs/issues/86
  expires 1M;
  access_log off;
  add_header Cache-Control "public";
  # add_header 'Access-Control-Allow-Origin' 'https://enorev.org';
  # ne pas utiliser add_header car un header peut deja etre mis par wordpress -> 2 headers et firefox n'aime pas
  # donc utiliser more_set_headers
  more_set_headers 'Access-Control-Allow-Origin: https://enorev.org';
}
