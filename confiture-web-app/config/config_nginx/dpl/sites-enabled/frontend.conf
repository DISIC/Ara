# noVNC
server {

  listen [::]:8080;
  listen 8080;

  # The host name to respond to
  server_name confiture;

  # default dpl
  include dpl/locations/default_dpl.conf;

  # limit conn. and req.
  # TODO by DINUM
  ## limit_req               zone=reqPerSec100 burst=100 nodelay;
  ## limit_conn              conPerIp 100;

  # logging for the server: everything on stdout
  access_log /dev/stdout main;
  error_log /dev/stderr warn;

  # Path for static files
  root /data/confiture;

  # For tests or if we do not want to open it
  #auth_basic            "DINUM private area";
  #auth_basic_user_file  /etc/nginx_user/dpl/htpasswd/dinum.htpasswd;

  # Allow "Well-Known URIs" as per RFC 5785 - and no reverse proxy for it (and also for lets encrypt)
  #location ~* ^/.well-known/ {
  #  auth_basic off;
  #  allow all;
  #}
  location / {

    # This is due to nginx and the try_files behavior below, it will always
    # try to hit the index as part of try_files.  If I set index as something
    # that doesn't resolve, we don't have to worry about index.html being cached.
    #
    # If frequent updates occur, it's important that index.html not be cached
    # in the browser.  Otherwise the software update will only occur when the
    # cached page expires.  The If-Modified-Since is a better way to handle this
    # for SPAs with frequent updates.
    index unresolvable-file-html.html;

    try_files $uri @index;
  }

  # This seperate location is so the no cache policy only applies to the index and nothing else.
  location @index {
    add_header Cache-Control no-cache;
    expires 0;
    try_files /index.html =404;
  }

  # # reverse proxy for backend
  location /api/ {

    # limit uploads to 100k
    client_max_body_size 3M;

    # static files expiration
    include dpl/locations/expires.conf;

    # limit methods
    include dpl/limits/methods_REST_confiture.conf;

    # use dynamic proxy if we want that a new DNS resolution takes place if upstream server is restarted
    # proxy_pass $upstream_backend;
    proxy_pass http://backend:8085;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr; # pass on real client's IP
    proxy_set_header CLIENT_IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
    proxy_read_timeout 900;
    proxy_buffers 16 16k;
    proxy_buffer_size 16k;

    # rewrite /api(.*) $1 break;

  }

  location /uploads/ {
    if ($request_method !~ ^(OPTIONS|GET|HEAD)$ ) {
      return 405;
    }

    proxy_pass http://backend:8085;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr; # pass on real client's IP
    proxy_set_header CLIENT_IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;

    proxy_read_timeout 900;
    proxy_buffers 16 16k;
    proxy_buffer_size 16k;
  }

}

